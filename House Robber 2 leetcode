class Solution {
public:
      int recursion(vector<int>& nums, int n){
         if(n<0)
         return 0;
          if(n==0)
        return nums[0];

         int pick = recursion(nums, n-2) + nums[n];
        int notpick = recursion(nums, n-1) ;

       return max(pick, notpick);
     }

    int memeoisation(vector<int>& nums, vector<int>& dp, int n){
        if(n<0)
        return 0;
         if(n==0)
        return nums[0];

        if(dp[n] != -1)
        return dp[n];

        int pick = nums[n] + memeosation(nums, dp, n - 2);
        int notpick = memeosation(nums, dp, n - 1);
        int ans = max(pick, notpick);
        dp[n] = ans;
        return ans;
    }

    int solveTabulation(int size, vector<int> &nums)
    {
        vector<int> dp(size+1, 0);
        dp[0] = nums[0];

        for(int i=1;i<=size;i++)
        {
            int include;
            if(i-2 >= 0)
                include = nums[i] + dp[i-2] ;
            else
                include = nums[i];
                
            int exclude = 0 + dp[i-1] ;
            dp[i] = max(include, exclude);
        }

        return dp[size];
    }

     int robber(vector<int>& nums, int l, int r) {
        int pre = 0, cur = 0;
        for (int i = l; i <= r; i++) {
            int temp = max(pre + nums[i], cur);
            pre = cur;
            cur = temp;
        }
        return cur;
    }

    int rob(vector<int>& nums) {
        // int n = nums.size();
        // int ans = recursion(nums, n-1);
        // return ans;
        // if(n == 1) {
        //     return nums[0];
        // }

        // vector<int> dp1(n - 1, -1);
        // vector<int> nums1(nums.begin(), nums.end() - 1);  
        // int case1 = memeosation(nums1, dp1, n - 2);

        // vector<int> dp2(n - 1, -1);
        // vector<int> nums2(nums.begin() + 1, nums.end());  
        // int case2 = memeosation(nums2, dp2, n - 2);

        // return max(case1, case2);
        
        //  int n = nums.size();
        // if(n==1)
        //     return nums[0];

        // int index = nums.size()-1;
        // vector<int> nums1, nums2;

        // for(int i=1;i<nums.size();i++)
        //     nums1.push_back(nums[i]);

        // for(int i=0;i<nums.size()-1;i++)
        //     nums2.push_back(nums[i]);
    
        // int ans = solveTabulation(nums1.size()-1, nums1);
        // int ans2 = solveTabulation(nums2.size()-1, nums2);

        // return max(ans, ans2);

        int n = nums.size(); 
        if (n < 2) return n ? nums[0] : 0;
        return max(robber(nums, 0, n - 2), robber(nums, 1, n - 1));
    }
};
