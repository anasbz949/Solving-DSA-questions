class Solution {
public:
    int recursion(int i, int n, vector<int>& nums){
        //base case
        if(i<0)
        return 0;
        if(i==1)
        return nums[0];

        int pick = recursion(i-2, n, nums) + nums[i];
        int nopick = recursion(i-1, n, nums);
        return max(pick1, pick2);
    }

     int memoisation(int i, int n, vector<int>& nums, vector<int> &dp){
        //base case
        if(i<0)
        return 0;
        if(i==1)
        return nums[0];

        if(dp[i] != -1)
        return dp[i];

        int pick = memoisation(i-2, n, nums, dp) + nums[i];
        int nopick = memoisation(i-1, n, nums, dp);
        return dp[i] = max(pick1, pick2);
    }

    int tabulation(int n, vector<int>& nums){
        vector<int> dp(n+1, 0);
        if(n==0)
        return 0;
        if(n==1)
        return nums[0];
        dp[1] = nums[0];
        for(int i=2; i<=n; i++){
            dp[i] = max(dp[i-1], dp[i-2]+nums[i-1]);
        }
        return dp[n];
    }
    int spaceOp(int n, vector<int>& nums){
        //base case
        if(n==0)
         return 0;
        if(n==1) 
        return nums[0];
        int prev2=0, prev1=nums[0];
        for(int i=2;i<=n;i++){
            int curr=max(prev1,prev2+nums[i-1]);
            prev2=prev1;
            prev1=curr;
        }
    return prev1;
    }

    int rob(vector<int>& nums) {
        int n = nums.size();
        // return recursion(n-1, n, nums);
        // vector<int> dp(n+1, -1);
        // return memoisation(n-1, n, nums, dp);
        // return tabulation(n-1, n, nums);
        return spaceOp(n, nums);
    }
};
